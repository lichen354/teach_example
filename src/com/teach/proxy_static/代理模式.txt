代理模式是一种常用的设计模式
	其目的就是为其他对象提供一个代理以控制对某个真实对象的访问。代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。
	通过代理层这一中间层，有效的控制对于真实委托类对象的直接访问，同时可以实现自定义的控制策略（spring的AOP机制），设计上获得更大的灵活性。
	
静态代理
优点：
1、直观感受，静态代理是实实在在的存在的，我们自己写的。
2、在编译期加入，提前就指定好了谁调用谁，效率高。

缺点：
同样，它的优点也成了它致命的缺点。
1、静态代理很麻烦，需要大量的代理类
     当我们有多个目标对象需要代理时，我就需要建立多个代理类，改变原有的代码，改的多了就很有可能出问题，必须要重新测试。
2、重复的代码会出现在各个角落里，违背了一个原则：重复不是好味道
      我们应该杜绝一次次的重复。
3、在编译期加入，系统的灵活性差

动态代理
优点：
1、一个动态代理类更加简单了，可以解决创建多个静态代理的麻烦，避免不断的重复多余的代码
2、调用目标代码时，会在方法“运行时”动态的加入，决定你是什么类型，才调谁，灵活

缺点：
1、系统灵活了，但是相比而言，效率降低了，比静态代理慢一点
2、动态代理比静态代理在代码的可读性上差了一点，不太容易理解
3、JDK动态代理只能对实现了接口的类进行代理
